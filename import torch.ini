import torch
import numpy as np
import scipy.sparse as sp
import os
from torch.utils.data import Dataset

class CORADataset(Dataset):
    def __init__(self, root='./'):
        # 1. 加载原始数据（内容+边）
        content = np.genfromtxt(os.path.join(root, 'Cora.content'), dtype=str)
        cites = np.genfromtxt(os.path.join(root, 'Cora.cites'), dtype=np.int32)
        
        # 2. 特征预处理（行归一化）
        self.features = self._norm_feats(sp.csr_matrix(content[:, 1:-1].astype(np.float32)))
        
        # 3. 标签预处理（字符串→整数）
        self.labels = self._map_labels(content[:, -1])
        
        # 4. 节点ID→索引映射（Cora节点ID非连续）
        idx = content[:, 0].astype(np.int32)
        idx_map = dict(zip(idx, range(len(idx))))
        
        # 5. 边预处理→无向邻接矩阵
        edges = np.vectorize(idx_map.get)(cites).reshape(-1, 2)
        self.adj = sp.coo_matrix(
            (np.ones(edges.shape[0]), (edges[:, 0], edges[:, 1])),
            shape=(len(self.labels), len(self.labels)), dtype=np.float32
        ).maximum(self.adj.T)  # 一键对称化

    def _norm_feats(self, feats):
        """特征行归一化（核心：避免特征值过大）"""
        row_sum = feats.sum(1).flatten()
        row_inv = np.power(row_sum, -1, where=row_sum != 0)  # 防止除零
        return sp.diags(row_inv).dot(feats).todense()

    def _map_labels(self, labels):
        """标签→整数映射（例如：'Neural_Networks'→0）"""
        label_dict = {c: i for i, c in enumerate(sorted(set(labels)))}
        return np.vectorize(label_dict.get)(labels).astype(np.int64)

    def __getitem__(self, idx):
        """返回单节点的特征+标签（兼容DataLoader）"""
        return (
            torch.tensor(self.features[idx], dtype=torch.float),
            torch.tensor(self.labels[idx], dtype=torch.long)
        )

    def __len__(self):
        """节点总数"""
        return len(self.labels)